import base64
exec(base64.b64decode('IyEvdXNyL2Jpbi9weXRob24zCiMgLSotIGNvZGluZzp1dGYtOCAtKi0KaW1wb3J0IHJhbmRvbQppbXBvcnQgb3MKaW1wb3J0IHN0cmluZwppbXBvcnQgc3VicHJvY2VzcwppbXBvcnQgcmUKZnJvbSByaWNoLmNvbnNvbGUgaW1wb3J0IENvbnNvbGUKCgpjb25zb2xlID0gQ29uc29sZSgpCgojIEZpbGUgd2hpdGVsaXN0LCBpZiB5b3UgZG9u4oCZdCBuZWVkIGl0LCB5b3UgY2FuIGNsZWFyIGl0LCBvciB5b3UgY2FuIGFkZCBpdCB5b3Vyc2VsZgp3aGl0ZUxpc3QgPSBbJ2ZhY2Vib29rJywgJ3RlbmNlbnQnLCAnaHVhd2VpJywgJ2FsaXl1bicsICdhbmRyb2lkL3N1cHBvcnQnLCAneGlhb21pJywgJ3Zpdm8nLCAnb3BwbycsICdhaXJibmInLCAnYW1hcCcsCiAgICAgICAgICAgICAnYWxpcGF5JywgJ2dvb2dsZScsICdva2h0dHAzJywgJ3JldHJvZml0MicsICdtb3ppbGxhJywgJ2ZyZWVtYXJrZXInLCAnYWxpYmFiYScsICdxaWhvbycsICdnc29uJywgJ2pwdXNoJywKICAgICAgICAgICAgICdidWd0YWdzJywgJ3RyZWxsbycsICdidW1wdGVjaCcsICdqaWd1YW5nJywgJ2dpdGh1YicsICd1bWVuZycsICdncmVlbnJvYm90JywgJ2VjbGlwc2UnLCAnYnVnbHknLCAnc2luYScsCiAgICAgICAgICAgICAnd2VpYm8nLCAnajI1NicsICd0YW9iYW8vd2VleCcsICdpZmx5dGVrJywgJ2FuZHJvaWR4LycsICdtZWl6dScsICdpby9hZ29yYScsICdpamtwbGF5ZXInLCAnc3FsY2lwaGVyJywKICAgICAgICAgICAgICdjbWljL3NzbycsICdzaGFueWFuX3NkaycsICdzdmdhcGxheWVyJywgJ2lvL2ZsdXR0ZXInLCAnYnl0ZWRhbmNlJywgJ2tvdGxpbicsICdvcmcvYXBhY2hlJywgJ29yZy9hc3BlY3RqJywKICAgICAgICAgICAgICdiYWlkdScsICd5b3V6YW4nLCAnamRwYXlzZGsnLCAncXEnLCAna290bGlueCcsICcvYW5kcm9pZC8nXQoKdGFza3MgPSBbXQoKCmNsYXNzIFJ1bkNNRDoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLnAgPSBOb25lCiAgICAgICAgc2VsZi5jbWQgPSBOb25lCgogICAgZGVmIHJ1bl9jbWQoc2VsZik6CiAgICAgICAgc2VsZi5wID0gc3VicHJvY2Vzcy5Qb3BlbihzZWxmLmNtZCwgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwgc3RkZXJyPXN1YnByb2Nlc3MuUElQRSwgc2hlbGw9VHJ1ZSkKICAgICAgICB0YXNrcy5hcHBlbmQoc2VsZikKICAgICAgICByZXR1cm4gc2VsZi5wLmNvbW11bmljYXRlKCkKCiAgICBAcHJvcGVydHkKICAgIGRlZiBpc19ydW5uaW5nKHNlbGYpOgogICAgICAgIGlmIHNlbGYucC5wb2xsKCkgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICB0YXNrcy5yZW1vdmUoc2VsZikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIHN0b3Aoc2VsZik6CiAgICAgICAgc2VsZi5wLmtpbGwoKQogICAgICAgIHRhc2tzLnJlbW92ZShzZWxmKQoKICAgIGRlZiBsb2coc2VsZik6CiAgICAgICAgcmV0dXJuICcnLmpvaW4oW3N0cihpdGVtLCBlbmNvZGluZz0ndXRmLTgnKSBmb3IgaXRlbSBpbiBzZWxmLnAuY29tbXVuaWNhdGUoKV0pCgoKZGVmIGNtZFN0cmluZyhzdHJsaW5lKToKICAgIHJldHVybiBzdHJsaW5lICsgJyB8ICcgKyBncmVwVGhpcmRGaWxlKCkKCgpkZWYgcmFuZG9tU3RyKG51bSk6CiAgICByZXR1cm4gJ18nICsgJycuam9pbihyYW5kb20uc2FtcGxlKHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cywgbnVtKSkKCgpkZWYgZ2V0QVBLRmlsZXMoZGlyKToKICAgIGZpbGVzQXJyYXkgPSBbXQogICAgZGlybGlzdCA9IG9zLndhbGsoZGlyKQogICAganNGaWxlcyA9IFtdCiAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gZGlybGlzdDoKICAgICAgICBmb3IgZmlsZSBpbiBmaWxlczoKICAgICAgICAgICAgcGF0aCA9IG9zLnBhdGguam9pbihyb290LCBmaWxlKQogICAgICAgICAgICBpZiBmaWxlLmVuZHN3aXRoKCcuc21hbGknKSBvciBmaWxlLmVuZHN3aXRoKCcuc28nKSBvciBmaWxlLmVuZHN3aXRoKCcueG1sJykgb3IgZmlsZS5lbmRzd2l0aCgKICAgICAgICAgICAgICAgICAgICAnLnltbCcpIG9yIGZpbGUuZW5kc3dpdGgoJy5odG1sJyk6CiAgICAgICAgICAgICAgICBpZiAnL29yaWdpbmFsLycgbm90IGluIHBhdGg6CiAgICAgICAgICAgICAgICAgICAgZmlsZXNBcnJheS5hcHBlbmQocGF0aCkKICAgICAgICAgICAgaWYgZmlsZS5lbmRzd2l0aCgnLmpzJyk6CiAgICAgICAgICAgICAgICBqc0ZpbGVzLmFwcGVuZChwYXRoKQogICAgICAgICAgICBpZiBmaWxlLmVuZHN3aXRoKCcuanNidW5kbGUnKSBvciBmaWxlLmVuZHN3aXRoKCcucm5idW5kbGUnKToKICAgICAgICAgICAgICAgIHBhdGggPSBjaGFuZ2VKU0J1bmRsZUZpbGUocGF0aCkKICAgICAgICAgICAgICAgIGpzRmlsZXMuYXBwZW5kKHBhdGgpCiAgICBuZXdQYXRocyA9IGpzQmVhdXRpZnkoanNGaWxlcykKICAgIGZpbGVzQXJyYXkgPSBmaWxlc0FycmF5ICsgbmV3UGF0aHMKICAgIHJldHVybiBmaWxlc0FycmF5CgoKZGVmIGdldEZpbGVOYW1lKHBhdGgpOgogICAgaWYgbGVuKHBhdGgpID4gMDoKICAgICAgICBpdGVtcyA9IHN0cihwYXRoKS5zcGxpdCgnLycpCiAgICAgICAgZGlyID0gJycKICAgICAgICBzdGFydCA9IC0xCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGl0ZW1zKSk6CiAgICAgICAgICAgIGlmICdzbWFsaScgaW4gaXRlbXNbaV0gYW5kICcuc21hbGknIG5vdCBpbiBpdGVtc1tpXToKICAgICAgICAgICAgICAgIHN0YXJ0ID0gaQogICAgICAgICAgICBpZiBzdGFydCAhPSAtMSBhbmQgc3RhcnQgIT0gaToKICAgICAgICAgICAgICAgIGRpciArPSBpdGVtc1tpXSArICcuJwogICAgICAgIHJldHVybiBkaXJbOi0xXQogICAgZWxzZToKICAgICAgICByZXR1cm4gJycKCgpkZWYganNCZWF1dGlmeShqc0ZpbGVzKToKICAgIG5ld0ZpbGVzID0gW10KICAgIGZvciBmaWxlIGluIGpzRmlsZXM6CiAgICAgICAgYmVhdXRpZnlGaWxlID0gZmlsZVs6LTNdICsgJzEuanMnCiAgICAgICAgbmV3RmlsZXMuYXBwZW5kKGJlYXV0aWZ5RmlsZSkKICAgICAgICBzdHJsaW5lID0gJ2pzLWJlYXV0aWZ5ICcgKyBmaWxlICsgJyA+ICcgKyBiZWF1dGlmeUZpbGUKICAgICAgICBydW5uZXIgPSBSdW5DTUQoKQogICAgICAgIHJ1bm5lci5jbWQgPSBzdHJsaW5lCiAgICAgICAgcnVubmVyLnJ1bl9jbWQoKQogICAgd2hpbGUgbGVuKHRhc2tzKSA+IDA6CiAgICAgICAgZm9yIGl0ZW0gaW4gdGFza3M6CiAgICAgICAgICAgIGl0ZW0uaXNfcnVubmluZwogICAgcmV0dXJuIG5ld0ZpbGVzCgoKZGVmIGNoYW5nZUpTQnVuZGxlRmlsZShmaWxlbmFtZSk6CiAgICBwb3J0aW9uID0gb3MucGF0aC5zcGxpdGV4dChmaWxlbmFtZSkKICAgIG5ld05hbWUgPSBmaWxlbmFtZQogICAgaWYgcG9ydGlvblsxXSA9PSAnLmpzYnVuZGxlJyBvciBwb3J0aW9uWzFdID09ICcucm5idW5kbGUnOgogICAgICAgIG5ld05hbWUgPSBzdHIocG9ydGlvblswXSkgKyAnLmpzJwogICAgICAgIG9zLnJlbmFtZShmaWxlbmFtZSwgbmV3TmFtZSkKICAgIHJldHVybiBuZXdOYW1lCgoKZGVmIGdldFVSTChsaW5lKToKICAgIHBhdHRlcm4gPSByZS5jb21waWxlKHInaHR0cFtzXT86Ly8oPzpbYS16QS1aXXxbMC05XXxbJC1fQC4mK118WyEqXChcKSxdfCg/OiVbMC05YS1mQS1GXVswLTlhLWZBLUZdKSkrJykKICAgIHVybHMgPSByZS5maW5kYWxsKHBhdHRlcm4sIGxpbmVbOi0xXSkKICAgIHJldHVybiB1cmxzCgoKZGVmIGdyZXBUaGlyZEZpbGUoKToKICAgIHJldHVybiAiZ3JlcCAtdiAnIiArICdcfCcuam9pbih3aGl0ZUxpc3QpICsgIiciCgoKZGVmIGdldFNtYWxpcyhhcnJzKToKICAgIHBhdGhzID0gW10KICAgIGZvciBpdGVtIGluIGFycnM6CiAgICAgICAgaWYgJy5zbWFsaTonIGluIGl0ZW06CiAgICAgICAgICAgIHBhdGggPSBpdGVtLnNwbGl0KCc6JylbMF0KICAgICAgICAgICAgaWYgcGF0aCBub3QgaW4gcGF0aHM6CiAgICAgICAgICAgICAgICBwYXRocy5hcHBlbmQocGF0aCkKICAgIHJldHVybiBwYXRocw=='))